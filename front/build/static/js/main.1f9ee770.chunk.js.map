{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","error_message","users","user_id","user_name","allUsers","_callee","response","data","regenerator_default","a","wrap","_context","prev","next","fetch","sent","json","_this","setState","t0","console","log","stop","addUser","_callee2","props","answer","user","_context2","Error","concat","method","success","result","Object","toConsumableArray","message","onSubmit","evt","preventDefault","push","this","_this2","react_default","createElement","map","x","key","placeholder","onChange","target","value","type","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f9ee770.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  state={\n    error_message: \"\",\n    users:[],\n    user_id:'',\n    user_name:''\n  }\n\n  \n  async componentDidMount(){\n    await this.allUsers()\n  }\n  //All users\n     allUsers = async ()=>{\n    try{\n      const response = await fetch('//localhost:8080/users')\n      const data = await response.json()\n      this.setState({users:data})\n    }catch(err){\n      console.log(err)\n    }\n  }\n// add user\naddUser = async props => {\n  try {\n    if (!props ) {\n      throw new Error(\n        `you need  a name `\n      );\n    }\n    const { user_name } = props;\n    console.log('adduser',props)\n    const response = await fetch(\n      `http://localhost:8080/add/user?user_name=${user_name}`,{\n        method:'POST',\n      }\n    \n      );\n    const answer = await response.json();\n    if (answer.success) {\n      // we reproduce the user that was created in the database, locally\n      const user_id = answer.result;\n      const user = {user_name, user_id };\n      const users = [...this.state.users, user];\n\n      this.setState({ users});\n    } else {\n      this.setState({ error_message: answer.message });\n    }\n  } catch (err) {\n    this.setState({ error_message: err.message });\n  }\n};\n\n//on Submit \nonSubmit = evt => {\n  evt.preventDefault();\n  \n  const { user_name } = this.state;\n  this.addUser({ user_name });\n  this.state.users.push({user_name})\n  this.setState({ user_name: \"\" });\n  \n};\n\n\n\n  render() {\n    console.log(this.setState.user_name)\n    const {users} = this.state\n    return (\n      <div>\n      { users.map( x => \n        <div key={x.user_id}>\n        <p>  {x.user_name}</p>\n        </div>\n        )\n      }\n\n      <form onSubmit={this.onSubmit}>\n        <input \n        placeholder=\"user_name\"\n        onChange={evt => this.setState({ user_name: evt.target.value })}\n        value={this.state.user_name}\n\n        /> \n        <input type=\"submit\" value=\"ok\" />\n        <input type=\"reset\" value=\"cancel\" className=\"button\" />\n\n      </form>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}